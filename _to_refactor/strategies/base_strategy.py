"""Base classes for trading strategies."""

from typing import Dict, Any
from abc import ABC, abstractmethod
from datetime import datetime


class StrategySignal:
    """Trading signal generated by a strategy."""

    def __init__(self, signal_type: str, symbol: str, action: str, confidence: float):
        self.signal_type = signal_type
        self.symbol = symbol
        self.action = action
        self.confidence = confidence
        self.timestamp = datetime.now()


class BaseStrategy(ABC):
    """Abstract base class for trading strategies."""

    def __init__(self, strategy_id: str, config: Dict[str, Any]):
        self.strategy_id = strategy_id
        self.config = config

    @abstractmethod
    def evaluate(self, data: Dict[str, Any]) -> StrategySignal:
        """Evaluate market data and return a trading signal."""
        raise NotImplementedError
